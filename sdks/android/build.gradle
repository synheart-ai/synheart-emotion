plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'signing'
}

android {
    namespace 'com.synheart.emotion'
    compileSdk 34

    defaultConfig {
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "0.1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    implementation 'com.google.code.gson:gson:2.10.1'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                
                groupId = 'ai.synheart'
                artifactId = 'emotion'
                version = android.defaultConfig.versionName

                pom {
                    name = 'Synheart Emotion Android'
                    description = 'On-device emotion inference from biosignals (HR/RR) for Android applications'
                    url = 'https://github.com/synheart-ai/synheart-emotion'
                    
                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }
                    
                    developers {
                        developer {
                            id = 'israel-goytom'
                            name = 'Israel Goytom'
                            email = 'israel@synheart.ai'
                        }
                        developer {
                            id = 'synheart-ai'
                            name = 'Synheart AI Team'
                            email = 'noreply@synheart.com'
                        }
                    }
                    
                    scm {
                        connection = 'scm:git:git://github.com/synheart-ai/synheart-emotion.git'
                        developerConnection = 'scm:git:ssh://github.com/synheart-ai/synheart-emotion.git'
                        url = 'https://github.com/synheart-ai/synheart-emotion'
                    }
                }
            }
        }
        
        repositories {
            maven {
                name = 'OSSRH'
                url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username = project.findProperty('OSSRH_USERNAME') ?: System.getenv('OSSRH_USERNAME') ?: ''
                    password = project.findProperty('OSSRH_PASSWORD') ?: System.getenv('OSSRH_PASSWORD') ?: ''
                }
            }
        }
    }
    
    signing {
        required { gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.release
        
        def signingKey = project.findProperty('GPG_PRIVATE_KEY') ?: System.getenv('GPG_PRIVATE_KEY') ?: ''
        def signingPassword = project.findProperty('GPG_PASSPHRASE') ?: System.getenv('GPG_PASSPHRASE') ?: ''
        
        if (signingKey && signingPassword) {
            useInMemoryPgpKeys(signingKey, signingPassword)
        } else {
            println "⚠️ Warning: GPG signing keys not found. Artifacts will not be signed."
        }
    }
}

// Sources and javadoc JARs are automatically generated by withSourcesJar() and withJavadocJar()
// in the publishing block above
